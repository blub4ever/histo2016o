package org.histo.config.enums;

public enum PdfTemplate {

	UREPROT("uReport", "json.pdfTemplate.ureport"), 
	COUNCIL("concil", "json.pdfTemplate.council", "templates/Final5-Logo.pdf", "templates/Final5-noLogo.pdf", false),
	SHORTREPORT("shortReport", "json.pdfTemplate.shortReport", "templates/Final5-Logo.pdf", "templates/Final5-noLogo.pdf", false),
	INTERNAL("internal", "json.pdfTemplate.diagnosis.internal", "templates/Final5-Logo.pdf", "templates/Final5-noLogo.pdf", false),
	INTERNAL_EXTENDED("internalExtended", "json.pdfTemplate.diagnosis.internal.extended", "templates/Final5-Logo.pdf", "templates/Final5-noLogo.pdf", true),
	FAMILY_PHYSICIAN("familyPhysician", "json.pdfTemplate.shortReport", "templates/Final5-Logo.pdf", "templates/Final5-noLogo.pdf", false),
	PRIVATE_PHYSICIAN("privatePhysician", "json.pdfTemplate.shortReport", "templates/Final5-Logo.pdf", "templates/Final5-noLogo.pdf", false);

	private final String type;

	private final String name;

	private final String fileWithLogo;

	private final String fileWithoutLogo;

	/**
	 * True if the document is the default document to print.
	 */
	private final boolean defaultTemplate;
	
	/**
	 * True if the document needs to be uploaded and can not be generated by the program
	 */
	private final boolean staticDocument;

	private PdfTemplate(final String type, final String name) {
		this.type = type;
		this.name = name;
		this.fileWithLogo = null;
		this.fileWithoutLogo = null;
		this.defaultTemplate = false;
		this.staticDocument = true;
	}
	
	private PdfTemplate(final String type, final String name, final String fileWithLogo, final String fileWithoutLogo,
			final boolean defaultTemplate) {
		this.type = type;
		this.name = name;
		this.fileWithLogo = fileWithLogo;
		this.fileWithoutLogo = fileWithoutLogo;
		this.defaultTemplate = defaultTemplate;
		this.staticDocument = false;
	}


	private PdfTemplate(final String type, final String name, final String fileWithLogo, final String fileWithoutLogo,
			final boolean defaultTemplate, final boolean staticDocument) {
		this.type = type;
		this.name = name;
		this.fileWithLogo = fileWithLogo;
		this.fileWithoutLogo = fileWithoutLogo;
		this.defaultTemplate = defaultTemplate;
		this.staticDocument = staticDocument;
	}

	public String getType() {
		return type;
	}

	public String getName() {
		return name;
	}

	public String getFileWithLogo(){
		return fileWithLogo;
	}

	public String getFileWithoutLogo(){
		return fileWithoutLogo;
	}

	public boolean isDefaultTemplate(){
		return defaultTemplate;
	}
	
	public boolean isStaticDocument(){
		return staticDocument;
	}
	
	/**
	 * Returns the first template marked as the default template.
	 * @return
	 */
	public static final PdfTemplate getDefaultTemplate() {
		for (PdfTemplate pdfTemplate : PdfTemplate.values()) {
			if (pdfTemplate.isDefaultTemplate())
				return pdfTemplate;
		}
		
		return PdfTemplate.values()[0];
	}
}
